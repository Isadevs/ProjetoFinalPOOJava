

import java.io.*;
import java.util.*;

public class Maquina {
    private Map<String, Produto> stock;
    private List<Produto> vendas;
    private double totalVendas;

    public Maquina() {
        stock = new HashMap<>();
        vendas = new ArrayList<>();
        totalVendas = 0.0;
    }

    public void adicionarProduto(Produto produto) {
        stock.put(produto.getReferencia(), produto);
    }

    public void retirarProduto(String referencia) {
        stock.remove(referencia);
    }

    public void venderProduto(String referencia, double montante) throws Exception {
        Produto produto = stock.get(referencia);
        if (produto == null) {
            throw new Exception("Produto não encontrado.");
        }

        if (montante < produto.getPreco()) {
            throw new Exception("Montante insuficiente. Faltam " + (produto.getPreco() - montante) + " euros.");
        }

        vendas.add(produto);
        totalVendas += produto.getPreco();
        stock.remove(referencia);
        System.out.println("Produto vendido: " + produto.getNome());
        if (montante > produto.getPreco()) {
            System.out.println("Troco: " + (montante - produto.getPreco()) + " euros.");
        }
    }

    public void consultarVendas() {
        System.out.println("Histórico de Vendas:");
        for (Produto produto : vendas) {
            System.out.println(produto.getInfo());
        }
        System.out.println("Total arrecadado: " + totalVendas);
    }

    public void salvarDados() throws IOException {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("stock.dat"))) {
            out.writeObject(stock);
            out.writeObject(vendas);
            out.writeDouble(totalVendas);
        }
    }

    public void carregarDados() throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("stock.dat"))) {
            stock = (Map<String, Produto>) in.readObject();
            vendas = (List<Produto>) in.readObject();
            totalVendas = in.readDouble();
        }
    }

    public void listarProdutosPorCategoria(String categoria) {
        System.out.println("Produtos na categoria " + categoria + ":");
        for (Produto produto : stock.values()) {
            if (produto instanceof Chocolate && categoria.equalsIgnoreCase("Chocolate")) {
                System.out.println(produto.getInfo());
            } else if (produto instanceof Refrigerante && categoria.equalsIgnoreCase("Refrigerante")) {
                System.out.println(produto.getInfo());
            } else if (produto instanceof Sande && categoria.equalsIgnoreCase("Sande")) {
                System.out.println(produto.getInfo());
            }
        }
    }

    // Novo método para listar todos os produtos no estoque
    public void listarTodosProdutos() {
        System.out.println("Produtos disponíveis no estoque:");
        if (stock.isEmpty()) {
            System.out.println("Nenhum produto disponível.");
        } else {
            for (Produto produto : stock.values()) {
                System.out.println(produto.getInfo());
            }
        }
    }

    public static void main(String[] args) {
        Maquina maquina = new Maquina();
        Scanner scanner = new Scanner(System.in);

        try {
            maquina.carregarDados();
        } catch (Exception e) {
            System.out.println("Erro ao carregar dados: " + e.getMessage());
        }

        boolean continuar = true;

        while (continuar) {
            System.out.println("\nMáquina de Venda Automática:");
            System.out.println("1. Comprar Produto");
            System.out.println("2. Adicionar Produto (Colaborador)");
            System.out.println("3. Retirar Produto (Colaborador)");
            System.out.println("4. Consultar Histórico de Vendas");
            System.out.println("5. Listar Todos os Produtos no Estoque"); // Nova opção de menu
            System.out.println("6. Salvar Dados");
            System.out.println("7. Carregar Dados");
            System.out.println("8. Sair");
            System.out.print("Escolha uma opção: ");
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Consome a quebra de linha

            switch (opcao) {
                case 1: // Comprar produto
                    System.out.println("Categorias disponíveis: Chocolate, Refrigerante, Sande");
                    System.out.print("Escolha uma categoria: ");
                    String categoria = scanner.nextLine();
                    maquina.listarProdutosPorCategoria(categoria);

                    System.out.print("Digite a referência do produto que deseja comprar: ");
                    String referencia = scanner.nextLine();
                    System.out.print("Digite o montante inserido: ");
                    double montante = scanner.nextDouble();
                    scanner.nextLine(); // Consome a quebra de linha

                    try {
                        maquina.venderProduto(referencia, montante);
                    } catch (Exception e) {
                        System.out.println("Erro na venda: " + e.getMessage());
                    }
                    break;

                case 2: // Adicionar produto (Colaborador)
                    System.out.println("Adicionar Produto (Chocolate, Refrigerante, Sande)");
                    System.out.print("Digite a categoria do produto: ");
                    String tipoProduto = scanner.nextLine();

                    System.out.print("Nome: ");
                    String nome = scanner.nextLine();
                    System.out.print("Preço: ");
                    double preco = scanner.nextDouble();
                    scanner.nextLine(); // Consome a quebra de linha
                    System.out.print("Referência: ");
                    String ref = scanner.nextLine();
                    System.out.print("Validade (YYYY-MM-DD): ");
                    String validade = scanner.nextLine();

                    if (tipoProduto.equalsIgnoreCase("Chocolate")) {
                        System.out.print("Tipo de cacau (negro, branco, leite): ");
                        String tipoCacau = scanner.nextLine();
                        System.out.print("Marca: ");
                        String marca = scanner.nextLine();
                        maquina.adicionarProduto(new Chocolate(nome, preco, ref, validade, tipoCacau, marca));
                    } else if (tipoProduto.equalsIgnoreCase("Refrigerante")) {
                        System.out.print("Tipo (normal, sem açúcar): ");
                        String tipo = scanner.nextLine();
                        System.out.print("Marca: ");
                        String marca = scanner.nextLine();
                        maquina.adicionarProduto(new Refrigerante(nome, preco, ref, validade, tipo, marca));
                    } else if (tipoProduto.equalsIgnoreCase("Sande")) {
                        System.out.print("Tipo de sande (mista, fiambre, queijo): ");
                        String tipoSande = scanner.nextLine();
                        System.out.print("Produtor: ");
                        String produtor = scanner.nextLine();
                        maquina.adicionarProduto(new Sande(nome, preco, ref, validade, tipoSande, produtor));
                    } else {
                        System.out.println("Categoria inválida.");
                    }
                    break;

                case 3: // Retirar produto (Colaborador)
                    System.out.print("Digite a referência do produto a ser retirado: ");
                    String refParaRetirar = scanner.nextLine();
                    maquina.retirarProduto(refParaRetirar);
                    System.out.println("Produto removido.");
                    break;

                case 4: // Consultar histórico de vendas
                    maquina.consultarVendas();
                    break;

                case 5: // Listar todos os produtos no estoque (Nova funcionalidade)
                    maquina.listarTodosProdutos();
                    break;

                case 6: // Salvar dados
                    try {
                        maquina.salvarDados();
                        System.out.println("Dados salvos com sucesso.");
                    } catch (IOException e) {
                        System.out.println("Erro ao salvar dados: " + e.getMessage());
                    }
                    break;

                case 7: // Carregar dados
                    try {
                        maquina.carregarDados();
                        System.out.println("Dados carregados com sucesso.");
                    } catch (IOException | ClassNotFoundException e) {
                        System.out.println("Erro ao carregar dados: " + e.getMessage());
                    }
                    break;

                case 8: // Sair
                    continuar = false;
                    System.out.println("Saindo...");
                    break;

                default:
                    System.out.println("Opção inválida.");
            }
        }

        scanner.close();
    }
}

